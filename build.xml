<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE project>

<project basedir="." name="sormuras/listing" default="test" xmlns:jacoco="antlib:org.jacoco.ant">

  <tstamp>
    <format property="timestamp" pattern="yyyyMMddHHmm" />
  </tstamp>

  <property name="version.number" value="1.0.0-SNAPSHOT-${timestamp}" />
  <property name="dir.out" value="${basedir}/bin/ant" />
  <property name="dir.src" value="${basedir}/src" />
  <property name="dir.lib" value="${basedir}/lib" />

  <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
    <classpath path="${dir.lib}/test/jacocoant.jar" />
  </taskdef>

  <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties">
    <classpath path="${dir.lib}/build/checkstyle-7.1-all.jar" />
  </taskdef>

  <target name="clean">
    <echo>be*free</echo>
    <delete dir="${dir.out}" />
  </target>

  <target name="init" depends="clean">
    <echo>Creating listing-${version.number}.jar</echo>
    <mkdir dir="${dir.out}" />
  </target>

  <target name="format" depends="init" description="apply google-java-format">
    <!-- <property name="format.jar" value="google-java-format-1.0-all-deps.jar" /> -->
    <property name="format.jar" value="google-java-format-1.1-SNAPSHOT-all-deps.jar" />
    <copy file="${dir.lib}/build/${format.jar}" todir="${basedir}/bin" />
    <!-- <get dest="${basedir}/bin" verbose="true" usetimestamp="true"> -->
    <!-- <url url="https://github.com/google/google-java-format/releases/download/google-java-format-1.0/${format.jar}" /> -->
    <!-- <url url="https://oss.sonatype.org/content/repositories/snapshots/com/google/googlejavaformat/google-java-format/1.1-SNAPSHOT/${format.jar}" /> -->
    <!-- </get> -->
    <fileset dir="${dir.src}" id="src.files">
      <include name="**/*.java" />
      <exclude name="generated/**/*" />
    </fileset>
    <concat destfile="${dir.out}/format-sources-1.txt">
      <fileset refid="src.files" />
    </concat>
    <pathconvert pathsep=" " property="javafiles" refid="src.files" />
    <java jar="${basedir}/bin/${format.jar}" fork="yes">
      <arg line="-replace" />
      <arg line="${javafiles}" />
    </java>
    <concat destfile="${dir.out}/format-sources-2.txt">
      <fileset refid="src.files" />
    </concat>
    <condition property="files.match">
      <filesmatch file1="${dir.out}/format-sources-1.txt"
                  file2="${dir.out}/format-sources-2.txt"
                  textfile="yes" />
    </condition>
    <fail unless="files.match">Formatter ${format.jar} changed at least one source file</fail>
    <echo>Formatter ${format.jar} applied</echo>
  </target>

  <target name="checkstyle" description="report of code convention violations">
    <checkstyle config="${dir.lib}/build/checkstyle-config-google.xml"
                maxErrors="0"
                maxWarnings="131"
                failOnViolation="false"
                failureProperty="checkstyle.failure.property">
      <fileset dir="${dir.src}/java" includes="**/*.java" />
      <formatter type="plain" />
      <formatter type="xml" tofile="${dir.out}/checkstyle_report.xml" />
    </checkstyle>
    <fail if="checkstyle.failure.property">Checkstyle found code convention violation(s)</fail>
  </target>

  <target name="compile" depends="format, checkstyle" description="compile and jar sources">
    <mkdir dir="${dir.out}/main/classes" />
    <javac destdir="${dir.out}/main/classes" encoding="UTF-8" includeantruntime="no" debug="on">
      <src path="${dir.src}/java" />
    </javac>
    <jar destfile="${dir.out}/listing-${version.number}.jar">
      <fileset dir="${dir.out}/main/classes" />
      <fileset dir="${dir.src}/java" />
      <manifest>
        <section name="com/github/sormuras/listing/">
          <attribute name="Specification-Title" value="listing" />
          <attribute name="Specification-Version" value="1.0" />
          <attribute name="Specification-Vendor" value="Christian Stein" />
          <attribute name="Implementation-Title" value="com.github.sormuras.listing" />
          <attribute name="Implementation-Version" value="${version.number}" />
          <attribute name="Implementation-Vendor" value="Christian Stein" />
        </section>
      </manifest>
    </jar>
  </target>

  <target name="test" depends="compile" description="execute all tests">
    <path id="junit.class.path">
      <pathelement path="${dir.out}/test/classes" />
      <pathelement path="${dir.out}/listing-${version.number}.jar" />
      <fileset dir="${dir.lib}/test">
        <include name="**/*.jar" />
      </fileset>
    </path>

    <mkdir dir="${dir.out}/test/classes" />
    <javac destdir="${dir.out}/test/classes" encoding="UTF-8" includeantruntime="no">
      <classpath refid="junit.class.path" />
      <src path="${dir.src}/test" />
    </javac>
    <copy todir="${dir.out}/test/classes">
      <fileset dir="${dir.src}/test" excludes="**/*.java" />
    </copy>

    <mkdir dir="${dir.out}/test-result" />
    <!-- JUnit5 + JaCoCo -->
    <echo>Running JUnit 5 tests with coverage info</echo>
    <jacoco:coverage destfile="${dir.out}/jacoco.exec">
      <java classname="org.junit.platform.console.ConsoleLauncher" fork="yes" failonerror="on">
        <classpath refid="junit.class.path" />
        <jvmarg value="-ea" />
        <jvmarg value="-Dfile.encoding=UTF-8" />
        <jvmarg value="-Djava.util.logging.config.file=${dir.src}/test/logging.properties" />
        <arg value="--all" />
        <arg value="--hide-details" />
        <arg line="--xml-reports-dir bin/junit5/test-reports" />
      </java>
    </jacoco:coverage>
    <fail message="Test failure detected, check test results." if="test.failed" />
    <jacoco:report>
      <executiondata>
        <file file="${dir.out}/jacoco.exec" />
      </executiondata>
      <structure name="sormuras/listing code coverage">
        <classfiles>
          <fileset dir="${dir.out}/main/classes" />
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="${dir.src}/java" />
        </sourcefiles>
      </structure>
      <html destdir="${dir.out}/jacoco" />
      <csv destfile="${dir.out}/report.csv" />
      <xml destfile="${dir.out}/report.xml" />
      <check>
        <rule element="PACKAGE">
          <limit counter="LINE" value="COVEREDRATIO" minimum="0.90" />
          <limit counter="CLASS" value="MISSEDCOUNT" maximum="0" />
        </rule>
      </check>
    </jacoco:report>
    <!-- Error Prone -->
    <echo>Running Error Prone static analysis</echo>
    <mkdir dir="${dir.out}/errorprone" />
    <javac destdir="${dir.out}/errorprone"
           compiler="com.google.errorprone.ErrorProneAntCompilerAdapter"
           encoding="UTF-8"
           debug="true"
           includeantruntime="false">
      <src path="${dir.src}/java" />
      <compilerclasspath>
        <pathelement location="${dir.lib}/build/error_prone_ant-2.0.11.jar" />
      </compilerclasspath>
    </javac>
  </target>

</project>
